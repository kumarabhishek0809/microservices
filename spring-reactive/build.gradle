buildscript {
    ext {
        springBootVersion = '2.2.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }

}

ext {
    springCloudVersion = 'Hoxton.M3'
    resilience4jVersion = '1.3.1'
}

dependencies {

    //Spring Starter
    implementation('org.springframework.cloud:spring-cloud-starter-config')

    //Spring Cloud
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    implementation('org.springframework.cloud:spring-cloud-netflix-core')

    //For distributed logging
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-sleuth'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-zipkin'

    //spring reactive
    implementation('org.springframework.boot:spring-boot-starter-data-mongodb-reactive')
    implementation('org.springframework.boot:spring-boot-starter-webflux')
    implementation('org.projectlombok:lombok')
    annotationProcessor("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")

    //Testing
    implementation('org.springframework.boot:spring-boot-starter-test')
    //this is the one which creates mongo DB instance while running test case.
    implementation('de.flapdoodle.embed:de.flapdoodle.embed.mongo')
    implementation('io.projectreactor:reactor-test')
    implementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    implementation  'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-aop')

    //Fallback Methods.
    implementation("io.github.resilience4j:resilience4j-spring-boot2:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-all:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-reactor:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-timelimiter:${resilience4jVersion}")
    implementation("io.github.resilience4j:resilience4j-circuitbreaker:${resilience4jVersion}")


    //for Data Capturing and monitoring
    implementation("io.micrometer:micrometer-registry-prometheus")

    implementation 'de.codecentric:chaos-monkey-spring-boot:2.1.1'
    implementation("io.vavr:vavr-jackson:0.10.0")
    implementation('io.projectreactor:reactor-test')
}

test {
    exclude 'com/simple/**'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
